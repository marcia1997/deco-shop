{"ast":null,"code":"import cartReducer from\"./cartReducer\";import{configureStore}from\"@reduxjs/toolkit\";import{persistStore,persistReducer,FLUSH,REHYDRATE,PAUSE,PERSIST,PURGE,REGISTER}from\"redux-persist\";import storage from\"redux-persist/lib/storage\";// Local storage for persistence\n//const stripe = require('stripe')('pk_test_51Nh8aOFJOqhv3053x1RQF8aROyyt8AXUWxtY5VHvp0ZUKeYlu24GRux3TC8bALDJ3o68h10UshxFNIxoeUvXDqHq008yG8u5Lr');\n// Configuration for Redux Persist\nvar persistConfig={key:\"root\",// Key to identify the root of the persisted state\nversion:1,storage:storage// Storage method (local storage in this case)\n};// Create a persisted reducer using Redux Persist\nvar persistedReducer=persistReducer(persistConfig,cartReducer);// Configure the Redux store\nexport var store=configureStore({reducer:{cart:persistedReducer// Using the persisted reducer for the 'cart' slice\n},middleware:function middleware(getDefaultMiddleware){return(// Configure serializability checking for actions\ngetDefaultMiddleware({// Ignore these specific action types when checking serializability\nserializableCheck:{ignoredActions:[FLUSH,REHYDRATE,PAUSE,PERSIST,PURGE,REGISTER]}}));}});// Create a persistor to persist the store using Redux Persist\nexport var persistor=persistStore(store);","map":{"version":3,"names":["cartReducer","configureStore","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","persistConfig","key","version","persistedReducer","store","reducer","cart","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["C:/Users/Marcia/OneDrive/Escritorio/Web-dev/Working/Ecommerce-2023/deco-shop/client/src/redux/store.js"],"sourcesContent":["import cartReducer from \"./cartReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // Local storage for persistence\r\n\r\n\r\n//const stripe = require('stripe')('pk_test_51Nh8aOFJOqhv3053x1RQF8aROyyt8AXUWxtY5VHvp0ZUKeYlu24GRux3TC8bALDJ3o68h10UshxFNIxoeUvXDqHq008yG8u5Lr');\r\n\r\n// Configuration for Redux Persist\r\nconst persistConfig = {\r\n  key: \"root\", // Key to identify the root of the persisted state\r\n  version: 1,\r\n  storage, // Storage method (local storage in this case)\r\n};\r\n\r\n// Create a persisted reducer using Redux Persist\r\nconst persistedReducer = persistReducer(persistConfig, cartReducer);\r\n\r\n// Configure the Redux store\r\nexport const store = configureStore({\r\n  reducer: {\r\n    cart: persistedReducer, // Using the persisted reducer for the 'cart' slice\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n   // Configure serializability checking for actions\r\n    getDefaultMiddleware({\r\n            // Ignore these specific action types when checking serializability\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\n// Create a persistor to persist the store using Redux Persist\r\nexport let persistor = persistStore(store);\r\n"],"mappings":"AAAA,MAAO,CAAAA,WAAW,KAAM,eAAe,CACvC,OAASC,cAAc,KAAQ,kBAAkB,CACjD,OACEC,YAAY,CACZC,cAAc,CACdC,KAAK,CACLC,SAAS,CACTC,KAAK,CACLC,OAAO,CACPC,KAAK,CACLC,QAAQ,KACH,eAAe,CACtB,MAAO,CAAAC,OAAO,KAAM,2BAA2B,CAAE;AAGjD;AAEA;AACA,GAAM,CAAAC,aAAa,CAAG,CACpBC,GAAG,CAAE,MAAM,CAAE;AACbC,OAAO,CAAE,CAAC,CACVH,OAAO,CAAPA,OAAS;AACX,CAAC,CAED;AACA,GAAM,CAAAI,gBAAgB,CAAGX,cAAc,CAACQ,aAAa,CAAEX,WAAW,CAAC,CAEnE;AACA,MAAO,IAAM,CAAAe,KAAK,CAAGd,cAAc,CAAC,CAClCe,OAAO,CAAE,CACPC,IAAI,CAAEH,gBAAkB;AAC1B,CAAC,CACDI,UAAU,CAAE,SAAAA,WAACC,oBAAoB,QAChC;AACCA,oBAAoB,CAAC,CACb;AACNC,iBAAiB,CAAE,CACjBC,cAAc,CAAE,CAACjB,KAAK,CAAEC,SAAS,CAAEC,KAAK,CAAEC,OAAO,CAAEC,KAAK,CAAEC,QAAQ,CACpE,CACF,CAAC,CAAC,GACN,CAAC,CAAC,CAEF;AACA,MAAO,IAAI,CAAAa,SAAS,CAAGpB,YAAY,CAACa,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}