{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { makeRequest } from \"../makeRequest\"; // Importing a custom function for making requests\n\n// Define the custom hook 'useFetch' that takes a 'url' as an argument\nconst useFetch = url => {\n  _s();\n  // Initialize state variables using the 'useState' hook\n\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(`${process.env.REACT_APP_API_URL}/products?populate=*&[filters][type][$eq]=featured&[filters][img][$exists]=true`);\n\n  // Use the 'useEffect' hook to perform data fetching when 'url' changes\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true); // Set loading state to true\n        const res = await makeRequest.get(url); // Make a GET request using 'makeRequest.get' method\n        setData(res.data.data); // Set the fetched data into the 'data' state\n      } catch (err) {\n        setError(true); // Set error state to true if there's an error\n      }\n\n      setLoading(false); // Set loading state back to false\n    };\n\n    fetchData(); // Call the fetchData function to initiate data fetching\n  }, [url]); // Depend on 'url' so that the effect runs when 'url' changes\n\n  // Return an object containing the fetched 'data', loading state, and error state\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useFetch, \"05MRCfR64cs3fJdoeXk9yPOFp78=\", false, function () {\n  return [useFetch];\n});\nexport default useFetch; // Export the custom hook","map":{"version":3,"names":["useEffect","useState","makeRequest","useFetch","url","_s","data","loading","error","process","env","REACT_APP_API_URL","fetchData","setLoading","res","get","setData","err","setError"],"sources":["C:/Users/Marcia/OneDrive/Escritorio/Web-dev/Working/Ecommerce-2023/deco-shop/client/src/hooks/useFetch.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { makeRequest } from \"../makeRequest\"; // Importing a custom function for making requests\r\n\r\n// Define the custom hook 'useFetch' that takes a 'url' as an argument\r\nconst useFetch = (url) => {\r\n  // Initialize state variables using the 'useState' hook\r\n\r\n  const { data, loading, error } = useFetch(`${process.env.REACT_APP_API_URL}/products?populate=*&[filters][type][$eq]=featured&[filters][img][$exists]=true`);\r\n\r\n\r\n\r\n  // Use the 'useEffect' hook to perform data fetching when 'url' changes\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true); // Set loading state to true\r\n        const res = await makeRequest.get(url); // Make a GET request using 'makeRequest.get' method\r\n        setData(res.data.data); // Set the fetched data into the 'data' state\r\n      } catch (err) {\r\n        setError(true); // Set error state to true if there's an error\r\n      }\r\n      setLoading(false); // Set loading state back to false\r\n    };\r\n    fetchData(); // Call the fetchData function to initiate data fetching\r\n  }, [url]); // Depend on 'url' so that the effect runs when 'url' changes\r\n\r\n  // Return an object containing the fetched 'data', loading state, and error state\r\n  return { data, loading, error };\r\n};\r\n\r\nexport default useFetch; // Export the custom hook\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,gBAAgB,CAAC,CAAC;;AAE9C;AACA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB;;EAEA,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGL,QAAQ,CAAE,GAAEM,OAAO,CAACC,GAAG,CAACC,iBAAkB,iFAAgF,CAAC;;EAI5J;EACAX,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QAClB,MAAMC,GAAG,GAAG,MAAMZ,WAAW,CAACa,GAAG,CAACX,GAAG,CAAC,CAAC,CAAC;QACxCY,OAAO,CAACF,GAAG,CAACR,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB;;MACAL,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC;;IACDD,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEX;EACA,OAAO;IAAEE,IAAI;IAAEC,OAAO;IAAEC;EAAM,CAAC;AACjC,CAAC;AAACH,EAAA,CAxBIF,QAAQ;EAAA,QAGqBA,QAAQ;AAAA;AAuB3C,eAAeA,QAAQ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}